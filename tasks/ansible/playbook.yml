- hosts: all
  become: yes
  tasks:
    - apt: update_cache=yes
    - apt: name=aptitude state=latest
    - apt: upgrade=safe

- hosts: all
  become: yes
  tasks:
    # Update sshd so no locales are used from the host
    - copy: src=files/sshd_config dest=/etc/ssh/sshd_config owner=root group=root mode=0644
      when: not docker|default(False)
    - service: name=ssh state=restarted
      when: not docker|default(False)

    # Update locales
    - apt: name=locales state=latest
    - lineinfile: regexp="^en_US\.UTF-8 UTF-8$" line="en_US.UTF-8 UTF-8" state=present dest=/etc/locale.gen
    - shell: locale-gen
    - shell: grep LANGUAGE /etc/default/locale > /dev/null && echo 'yes' || echo 'no'
      register: locales_set
      changed_when: false
    - shell: export LANGUAGE="en_US.UTF-8" && echo 'LANGUAGE="en_US.UTF-8"' >> /etc/default/locale && echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale
      when: locales_set.stdout == 'no'

- hosts: all
  become: yes
  tags: [setup]
  vars:
    composer_version: "1.1.0"
    mailhog_version: "0.2.0"
    node_version: "4.x"
  tasks:
    # Install dependencies
    - apt: name={{item}} state=latest
      with_items:
        - ruby
        - ruby-dev
        - libsqlite3-dev
        - sqlite3
        - git
        - htop
        - dnsutils
        - tmux
        - screen
        - curl
        - wget
        - apt-transport-https
        - python-pip
        - nano
        - vim

    # Setup postgresql
    - apt: name={{item}} state=latest
      with_items:
        - postgresql-9.4
        - postgresql-client-9.4
        - python-psycopg2
    - shell: pg_createcluster --start 9.4 main creates=/etc/postgresql/9.4/main
    - copy: src=files/postgresql.conf dest=/etc/postgresql/9.4/main/postgresql.conf owner=postgres group=postgres mode=0644
    - copy: src=files/pg_hba.conf dest=/etc/postgresql/9.4/main/pg_hba.conf owner=postgres group=postgres mode=0644
    - service: name=postgresql state=started
    - postgresql_user: name=vagrant role_attr_flags=SUPERUSER state=present
      become: yes
      become_user: postgres
    - postgresql_db: name=vagrant owner=vagrant
      become: yes
      become_user: postgres
    - service: name=postgresql state=restarted

    # Setup PHP
    - apt: name={{item}} state=latest
      with_items:
        - php5-fpm
        - php5-cli
        - php5-curl
        - php5-gd
        - php5-intl
        - php5-imagick
        - php5-mcrypt
        - php5-memcache
        - php5-sqlite
        - php5-pgsql
        - php5-xmlrpc
        - php5-dev
        - php-pear
    - copy: src=files/php.ini dest=/etc/php5/cli/php.ini owner=root group=root mode=0644
    - copy: src=files/php.ini dest=/etc/php5/fpm/php.ini owner=root group=root mode=0644
    - copy: src=files/php_fpm.conf dest=/etc/php5/fpm/pool.d/www.conf owner=root group=root mode=0644
    - service: name=php5-fpm state=restarted

    # Setup nginx
    - apt: name=nginx-full state=latest
    - file: path=/etc/nginx/sites-enabled/default state=absent
    - copy: src=files/nginx.dev.conf dest=/etc/nginx/sites-enabled/dev.conf owner=root group=root mode=0644
    - copy: src=files/nginx.prod.conf dest=/etc/nginx/sites-enabled/prod.conf owner=root group=root mode=0644
    - service: name=nginx state=restarted

    # Install nodejs
    - apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key id=9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280
    - apt_repository: repo="deb https://deb.nodesource.com/node_{{node_version}} jessie main" state=present update_cache=yes
    - apt_repository: repo="deb-src https://deb.nodesource.com/node_{{node_version}} jessie main" state=present update_cache=yes
    - apt: name=nodejs state=latest

    # Install composer
    - get_url: url=https://getcomposer.org/download/{{composer_version}}/composer.phar dest=/usr/local/bin/composer mode=0755

    # Update npm and install gulp and bower
    - shell: npm install -g npm
    - shell: npm install -g gulp
    - shell: npm install -g bower

    # Install mailhog
    - get_url: url=https://github.com/mailhog/MailHog/releases/download/v{{mailhog_version}}/MailHog_linux_amd64 dest=/usr/local/bin/mailhog mode=0755 owner=root group=root
    - copy: src=files/mailhog.service dest=/etc/systemd/system/mailhog.service owner=root group=root mode=0644
    - service: name=mailhog enabled=yes
    - service: name=mailhog state=restarted

    # Install sphinx documentation tool
    - pip: name={{item}} state=latest
      with_items: [sphinx, sphinx_rtd_theme, sphinx-autobuild]

    # Copy updated config files
    - copy: src=files/bash_profile.sh dest=/home/vagrant/.bash_profile owner=vagrant group=vagrant mode=0644
    - copy: src=files/profile.sh dest=/etc/profile.d/vagrant.sh owner=root group=root mode=0644
    - copy: src={{ item }} dest=/home/vagrant/.gitconfig owner=vagrant group=vagrant mode=0644
      with_first_found:
        - ~/.gitconfig
        - files/.gitconfig
